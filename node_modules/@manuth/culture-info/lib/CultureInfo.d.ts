/**
 * Provides information about a specific culture (called a locale for unmanaged code development).
 */
export declare class CultureInfo {
    /**
     * The invariant culture.
     */
    private static invariantCulture;
    /**
     * The language of the culture.
     */
    private language;
    /**
     * The script of the culture.
     */
    private script;
    /**
     * The region of the culture.
     */
    private region;
    /**
     * Initializes a new instance of the {@link CultureInfo `CultureInfo`} class.
     *
     * @param name
     * A non case-sensitive predefined {@link CultureInfo `CultureInfo`} name.
     */
    constructor(name: string);
    /**
     * Gets the {@link CultureInfo `CultureInfo`} object that is culture-independent (invariant).
     */
    static get InvariantCulture(): CultureInfo;
    /**
     * Gets a value indicating whether the current {@link CultureInfo `CultureInfo`} represents a neutral culture.
     */
    get IsNeutralCulture(): boolean;
    /**
     * Gets the culture name.
     */
    get Name(): string;
    /**
     * Gets the {@link CultureInfo `CultureInfo`} that represents the parent culture of the current {@link CultureInfo `CultureInfo`}.
     */
    get Parent(): CultureInfo;
    /**
     * Gets or sets the language of the culture.
     */
    protected get Language(): string;
    /**
     * @inheritdoc
     */
    protected set Language(value: string);
    /**
     * Gets or sets the script of the culture.
     */
    protected get Script(): string;
    /**
     * @inheritdoc
     */
    protected set Script(value: string);
    /**
     * Gets or sets the region of the culture.
     */
    protected get Region(): string;
    /**
     * @inheritdoc
     */
    protected set Region(value: string);
    /**
     * Returns a string which represents the object.
     *
     * @returns
     * A string which represents the object.
     */
    toString(): string;
    /**
     * Returns the primitive value of the object.
     *
     * @returns
     * The primitive value of the object.
     */
    valueOf(): any;
}
